
the_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000238  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000410  08000410  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000410  08000410  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000410  08000410  00002004  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000410  08000410  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000410  08000410  00001410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000414  08000414  00001414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000418  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009e3  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000018d  00000000  00000000  00002a17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00002ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fbb  00000000  00000000  00002c39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000779  00000000  00000000  0001cbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e0ba  00000000  00000000  0001d36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bb427  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000a0  00000000  00000000  000bb46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  000bb50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000004 	.word	0x20000004
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080003f8 	.word	0x080003f8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000008 	.word	0x20000008
 8000214:	080003f8 	.word	0x080003f8

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	@ (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
#include "stm32g474xx.h"

uint32_t frec_change = 15999;
uint32_t direction = 0;
int main(void) {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	//частота микроконтроллера 16Mгц
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN | RCC_APB1ENR1_TIM3EN;
 8000258:	4b19      	ldr	r3, [pc, #100]	@ (80002c0 <main+0x6c>)
 800025a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800025c:	4a18      	ldr	r2, [pc, #96]	@ (80002c0 <main+0x6c>)
 800025e:	f043 0303 	orr.w	r3, r3, #3
 8000262:	6593      	str	r3, [r2, #88]	@ 0x58
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN;
 8000264:	4b16      	ldr	r3, [pc, #88]	@ (80002c0 <main+0x6c>)
 8000266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000268:	4a15      	ldr	r2, [pc, #84]	@ (80002c0 <main+0x6c>)
 800026a:	f043 0310 	orr.w	r3, r3, #16
 800026e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	GPIOE->MODER &= ~GPIO_MODER_MODE5_Msk;
 8000270:	4b14      	ldr	r3, [pc, #80]	@ (80002c4 <main+0x70>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	4a13      	ldr	r2, [pc, #76]	@ (80002c4 <main+0x70>)
 8000276:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800027a:	6013      	str	r3, [r2, #0]
	GPIOE->MODER |= 1 << GPIO_MODER_MODE5_Pos;
 800027c:	4b11      	ldr	r3, [pc, #68]	@ (80002c4 <main+0x70>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a10      	ldr	r2, [pc, #64]	@ (80002c4 <main+0x70>)
 8000282:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000286:	6013      	str	r3, [r2, #0]

	//настройка прерывания
	TIM2->PSC = frec_change;
 8000288:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800028c:	4b0e      	ldr	r3, [pc, #56]	@ (80002c8 <main+0x74>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->ARR = 1000;
 8000292:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000296:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800029a:	62da      	str	r2, [r3, #44]	@ 0x2c

	TIM2->DIER = TIM_DIER_UIE;
 800029c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a0:	2201      	movs	r2, #1
 80002a2:	60da      	str	r2, [r3, #12]

	TIM2->CR1 |= TIM_CR1_CEN;
 80002a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	6013      	str	r3, [r2, #0]
	NVIC_EnableIRQ(TIM2_IRQn);
 80002b4:	201c      	movs	r0, #28
 80002b6:	f7ff ffaf 	bl	8000218 <__NVIC_EnableIRQ>

	while (1) {
 80002ba:	bf00      	nop
 80002bc:	e7fd      	b.n	80002ba <main+0x66>
 80002be:	bf00      	nop
 80002c0:	40021000 	.word	0x40021000
 80002c4:	48001000 	.word	0x48001000
 80002c8:	20000000 	.word	0x20000000

080002cc <TIM2_IRQHandler>:

	}
}

void TIM2_IRQHandler(void) {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	//изменение частоты от 1 Гц до 5 Гц и обратно
	if(frec_change > 3199 && direction == 0)
 80002d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000350 <TIM2_IRQHandler+0x84>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f5b3 6f48 	cmp.w	r3, #3200	@ 0xc80
 80002d8:	d30a      	bcc.n	80002f0 <TIM2_IRQHandler+0x24>
 80002da:	4b1e      	ldr	r3, [pc, #120]	@ (8000354 <TIM2_IRQHandler+0x88>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d106      	bne.n	80002f0 <TIM2_IRQHandler+0x24>
	{
		frec_change -= 1600;
 80002e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000350 <TIM2_IRQHandler+0x84>)
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f5a3 63c8 	sub.w	r3, r3, #1600	@ 0x640
 80002ea:	4a19      	ldr	r2, [pc, #100]	@ (8000350 <TIM2_IRQHandler+0x84>)
 80002ec:	6013      	str	r3, [r2, #0]
 80002ee:	e002      	b.n	80002f6 <TIM2_IRQHandler+0x2a>
	}else{
		direction = 1;
 80002f0:	4b18      	ldr	r3, [pc, #96]	@ (8000354 <TIM2_IRQHandler+0x88>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	601a      	str	r2, [r3, #0]
	}
    if(frec_change < 15999 && direction == 1)
 80002f6:	4b16      	ldr	r3, [pc, #88]	@ (8000350 <TIM2_IRQHandler+0x84>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	f643 627e 	movw	r2, #15998	@ 0x3e7e
 80002fe:	4293      	cmp	r3, r2
 8000300:	d80a      	bhi.n	8000318 <TIM2_IRQHandler+0x4c>
 8000302:	4b14      	ldr	r3, [pc, #80]	@ (8000354 <TIM2_IRQHandler+0x88>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d106      	bne.n	8000318 <TIM2_IRQHandler+0x4c>
	{
		frec_change += 1600;
 800030a:	4b11      	ldr	r3, [pc, #68]	@ (8000350 <TIM2_IRQHandler+0x84>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f503 63c8 	add.w	r3, r3, #1600	@ 0x640
 8000312:	4a0f      	ldr	r2, [pc, #60]	@ (8000350 <TIM2_IRQHandler+0x84>)
 8000314:	6013      	str	r3, [r2, #0]
 8000316:	e002      	b.n	800031e <TIM2_IRQHandler+0x52>
	}else
	{
		direction = 0;
 8000318:	4b0e      	ldr	r3, [pc, #56]	@ (8000354 <TIM2_IRQHandler+0x88>)
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
	}
		GPIOE->ODR ^= GPIO_ODR_OD5;
 800031e:	4b0e      	ldr	r3, [pc, #56]	@ (8000358 <TIM2_IRQHandler+0x8c>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0d      	ldr	r2, [pc, #52]	@ (8000358 <TIM2_IRQHandler+0x8c>)
 8000324:	f083 0320 	eor.w	r3, r3, #32
 8000328:	6153      	str	r3, [r2, #20]
		TIM2->PSC = frec_change;
 800032a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800032e:	4b08      	ldr	r3, [pc, #32]	@ (8000350 <TIM2_IRQHandler+0x84>)
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6293      	str	r3, [r2, #40]	@ 0x28
	TIM2->SR &= ~ TIM_SR_UIF;
 8000334:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000338:	691b      	ldr	r3, [r3, #16]
 800033a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800033e:	f023 0301 	bic.w	r3, r3, #1
 8000342:	6113      	str	r3, [r2, #16]
}
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	20000000 	.word	0x20000000
 8000354:	20000020 	.word	0x20000020
 8000358:	48001000 	.word	0x48001000

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800035c:	480d      	ldr	r0, [pc, #52]	@ (8000394 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/  bl  SystemInit
 8000360:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000364:	480c      	ldr	r0, [pc, #48]	@ (8000398 <LoopForever+0x6>)
  ldr r1, =_edata
 8000366:	490d      	ldr	r1, [pc, #52]	@ (800039c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000368:	4a0d      	ldr	r2, [pc, #52]	@ (80003a0 <LoopForever+0xe>)
  movs r3, #0
 800036a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800036c:	e002      	b.n	8000374 <LoopCopyDataInit>

0800036e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800036e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000370:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000372:	3304      	adds	r3, #4

08000374 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000374:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000376:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000378:	d3f9      	bcc.n	800036e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800037a:	4a0a      	ldr	r2, [pc, #40]	@ (80003a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800037c:	4c0a      	ldr	r4, [pc, #40]	@ (80003a8 <LoopForever+0x16>)
  movs r3, #0
 800037e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000380:	e001      	b.n	8000386 <LoopFillZerobss>

08000382 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000382:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000384:	3204      	adds	r2, #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000386:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000388:	d3fb      	bcc.n	8000382 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800038a:	f000 f811 	bl	80003b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038e:	f7ff ff61 	bl	8000254 <main>

08000392 <LoopForever>:

LoopForever:
  b LoopForever
 8000392:	e7fe      	b.n	8000392 <LoopForever>
  ldr   r0, =_estack
 8000394:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000398:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800039c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003a0:	08000418 	.word	0x08000418
  ldr r2, =_sbss
 80003a4:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003a8:	20000024 	.word	0x20000024

080003ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003ac:	e7fe      	b.n	80003ac <ADC1_2_IRQHandler>
	...

080003b0 <__libc_init_array>:
 80003b0:	b570      	push	{r4, r5, r6, lr}
 80003b2:	4d0d      	ldr	r5, [pc, #52]	@ (80003e8 <__libc_init_array+0x38>)
 80003b4:	4c0d      	ldr	r4, [pc, #52]	@ (80003ec <__libc_init_array+0x3c>)
 80003b6:	1b64      	subs	r4, r4, r5
 80003b8:	10a4      	asrs	r4, r4, #2
 80003ba:	2600      	movs	r6, #0
 80003bc:	42a6      	cmp	r6, r4
 80003be:	d109      	bne.n	80003d4 <__libc_init_array+0x24>
 80003c0:	4d0b      	ldr	r5, [pc, #44]	@ (80003f0 <__libc_init_array+0x40>)
 80003c2:	4c0c      	ldr	r4, [pc, #48]	@ (80003f4 <__libc_init_array+0x44>)
 80003c4:	f000 f818 	bl	80003f8 <_init>
 80003c8:	1b64      	subs	r4, r4, r5
 80003ca:	10a4      	asrs	r4, r4, #2
 80003cc:	2600      	movs	r6, #0
 80003ce:	42a6      	cmp	r6, r4
 80003d0:	d105      	bne.n	80003de <__libc_init_array+0x2e>
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003d8:	4798      	blx	r3
 80003da:	3601      	adds	r6, #1
 80003dc:	e7ee      	b.n	80003bc <__libc_init_array+0xc>
 80003de:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e2:	4798      	blx	r3
 80003e4:	3601      	adds	r6, #1
 80003e6:	e7f2      	b.n	80003ce <__libc_init_array+0x1e>
 80003e8:	08000410 	.word	0x08000410
 80003ec:	08000410 	.word	0x08000410
 80003f0:	08000410 	.word	0x08000410
 80003f4:	08000414 	.word	0x08000414

080003f8 <_init>:
 80003f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003fa:	bf00      	nop
 80003fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003fe:	bc08      	pop	{r3}
 8000400:	469e      	mov	lr, r3
 8000402:	4770      	bx	lr

08000404 <_fini>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr
