
the_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000524  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006fc  080006fc  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006fc  080006fc  00002008  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080006fc  080006fc  00002008  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080006fc  080006fc  00002008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006fc  080006fc  000016fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000700  08000700  00001700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000008  20000000  08000704  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmsram      00000000  10000000  10000000  00002008  2**0
                  CONTENTS
 10 .bss          0000003c  20000008  20000008  00002008  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000044  20000044  00002008  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002008  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000aa2  00000000  00000000  00002038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000232  00000000  00000000  00002ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000078  00000000  00000000  00002d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000060  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae07  00000000  00000000  00002de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000966  00000000  00000000  0001dbef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009e138  00000000  00000000  0001e555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bc68d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000014c  00000000  00000000  000bc6d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000041  00000000  00000000  000bc81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000008 	.word	0x20000008
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080006e4 	.word	0x080006e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000000c 	.word	0x2000000c
 8000214:	080006e4 	.word	0x080006e4

08000218 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000218:	b480      	push	{r7}
 800021a:	b083      	sub	sp, #12
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000226:	2b00      	cmp	r3, #0
 8000228:	db0b      	blt.n	8000242 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022a:	79fb      	ldrb	r3, [r7, #7]
 800022c:	f003 021f 	and.w	r2, r3, #31
 8000230:	4907      	ldr	r1, [pc, #28]	@ (8000250 <__NVIC_EnableIRQ+0x38>)
 8000232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000236:	095b      	lsrs	r3, r3, #5
 8000238:	2001      	movs	r0, #1
 800023a:	fa00 f202 	lsl.w	r2, r0, r2
 800023e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr
 800024e:	bf00      	nop
 8000250:	e000e100 	.word	0xe000e100

08000254 <main>:
void victory();
void defeat();
void dummy_delay();
void try();

int main() {
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOEEN | RCC_AHB2ENR_GPIOBEN;
 8000258:	4b1b      	ldr	r3, [pc, #108]	@ (80002c8 <main+0x74>)
 800025a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800025c:	4a1a      	ldr	r2, [pc, #104]	@ (80002c8 <main+0x74>)
 800025e:	f043 0312 	orr.w	r3, r3, #18
 8000262:	64d3      	str	r3, [r2, #76]	@ 0x4c
	RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8000264:	4b18      	ldr	r3, [pc, #96]	@ (80002c8 <main+0x74>)
 8000266:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000268:	4a17      	ldr	r2, [pc, #92]	@ (80002c8 <main+0x74>)
 800026a:	f043 0301 	orr.w	r3, r3, #1
 800026e:	6613      	str	r3, [r2, #96]	@ 0x60

    SYSCFG->EXTICR[3] |= SYSCFG_EXTICR4_EXTI12_PB | SYSCFG_EXTICR4_EXTI13_PB | SYSCFG_EXTICR4_EXTI14_PB | SYSCFG_EXTICR4_EXTI15_PB;
 8000270:	4b16      	ldr	r3, [pc, #88]	@ (80002cc <main+0x78>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a15      	ldr	r2, [pc, #84]	@ (80002cc <main+0x78>)
 8000276:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 800027a:	f043 0311 	orr.w	r3, r3, #17
 800027e:	6153      	str	r3, [r2, #20]

    EXTI->IMR1 |= EXTI_IMR1_IM12 | EXTI_IMR1_IM13 | EXTI_IMR1_IM14 | EXTI_IMR1_IM15;
 8000280:	4b13      	ldr	r3, [pc, #76]	@ (80002d0 <main+0x7c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a12      	ldr	r2, [pc, #72]	@ (80002d0 <main+0x7c>)
 8000286:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 800028a:	6013      	str	r3, [r2, #0]
  	    EXTI->FTSR1 |= EXTI_FTSR1_FT12 | EXTI_FTSR1_FT13 | EXTI_FTSR1_FT14 | EXTI_FTSR1_FT15;
 800028c:	4b10      	ldr	r3, [pc, #64]	@ (80002d0 <main+0x7c>)
 800028e:	68db      	ldr	r3, [r3, #12]
 8000290:	4a0f      	ldr	r2, [pc, #60]	@ (80002d0 <main+0x7c>)
 8000292:	f443 4370 	orr.w	r3, r3, #61440	@ 0xf000
 8000296:	60d3      	str	r3, [r2, #12]
  	  NVIC_EnableIRQ( EXTI15_10_IRQn );
 8000298:	2028      	movs	r0, #40	@ 0x28
 800029a:	f7ff ffbd 	bl	8000218 <__NVIC_EnableIRQ>

	GPIOE->MODER &= ~(GPIO_MODER_MODE0_Msk | GPIO_MODER_MODE1_Msk
 800029e:	4b0d      	ldr	r3, [pc, #52]	@ (80002d4 <main+0x80>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	4a0c      	ldr	r2, [pc, #48]	@ (80002d4 <main+0x80>)
 80002a4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80002a8:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE2_Msk | GPIO_MODER_MODE3_Msk);
	GPIOE->MODER |= 1 << GPIO_MODER_MODE0_Pos | 1 << GPIO_MODER_MODE1_Pos
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <main+0x80>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	4a09      	ldr	r2, [pc, #36]	@ (80002d4 <main+0x80>)
 80002b0:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 80002b4:	6013      	str	r3, [r2, #0]
			| 1 << GPIO_MODER_MODE2_Pos | 1 << GPIO_MODER_MODE3_Pos;

	GPIOB->MODER &= ~(GPIO_MODER_MODE12_Msk | GPIO_MODER_MODE13_Msk
 80002b6:	4b08      	ldr	r3, [pc, #32]	@ (80002d8 <main+0x84>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	4a07      	ldr	r2, [pc, #28]	@ (80002d8 <main+0x84>)
 80002bc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80002c0:	6013      	str	r3, [r2, #0]
			| GPIO_MODER_MODE14_Msk | GPIO_MODER_MODE15_Msk);

	while (1) {
 80002c2:	bf00      	nop
 80002c4:	e7fd      	b.n	80002c2 <main+0x6e>
 80002c6:	bf00      	nop
 80002c8:	40021000 	.word	0x40021000
 80002cc:	40010000 	.word	0x40010000
 80002d0:	40010400 	.word	0x40010400
 80002d4:	48001000 	.word	0x48001000
 80002d8:	48000400 	.word	0x48000400

080002dc <EXTI15_10_IRQHandler>:
	}

}

void EXTI15_10_IRQHandler()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	if (exception < 3) {
 80002e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000358 <EXTI15_10_IRQHandler+0x7c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b02      	cmp	r3, #2
 80002e6:	d802      	bhi.n	80002ee <EXTI15_10_IRQHandler+0x12>
				try();
 80002e8:	f000 f904 	bl	80004f4 <try>
 80002ec:	e001      	b.n	80002f2 <EXTI15_10_IRQHandler+0x16>
			} else {
				defeat();
 80002ee:	f000 f883 	bl	80003f8 <defeat>
			}
			if (pressed1 == 1 && pressed2 == 1 && pressed3 == 1 && pressed4 == 1) {
 80002f2:	4b1a      	ldr	r3, [pc, #104]	@ (800035c <EXTI15_10_IRQHandler+0x80>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b01      	cmp	r3, #1
 80002f8:	d12c      	bne.n	8000354 <EXTI15_10_IRQHandler+0x78>
 80002fa:	4b19      	ldr	r3, [pc, #100]	@ (8000360 <EXTI15_10_IRQHandler+0x84>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d128      	bne.n	8000354 <EXTI15_10_IRQHandler+0x78>
 8000302:	4b18      	ldr	r3, [pc, #96]	@ (8000364 <EXTI15_10_IRQHandler+0x88>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	2b01      	cmp	r3, #1
 8000308:	d124      	bne.n	8000354 <EXTI15_10_IRQHandler+0x78>
 800030a:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <EXTI15_10_IRQHandler+0x8c>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	2b01      	cmp	r3, #1
 8000310:	d120      	bne.n	8000354 <EXTI15_10_IRQHandler+0x78>
				if (strncmp(key, key_word, 5) == 0) {
 8000312:	2205      	movs	r2, #5
 8000314:	4915      	ldr	r1, [pc, #84]	@ (800036c <EXTI15_10_IRQHandler+0x90>)
 8000316:	4816      	ldr	r0, [pc, #88]	@ (8000370 <EXTI15_10_IRQHandler+0x94>)
 8000318:	f000 f9ad 	bl	8000676 <strncmp>
 800031c:	4603      	mov	r3, r0
 800031e:	2b00      	cmp	r3, #0
 8000320:	d102      	bne.n	8000328 <EXTI15_10_IRQHandler+0x4c>
					victory();
 8000322:	f000 f83f 	bl	80003a4 <victory>
					pressed3 = 0;
					pressed4 = 0;
					enter_nums = 0;
				}
			}
}
 8000326:	e015      	b.n	8000354 <EXTI15_10_IRQHandler+0x78>
					defeat();
 8000328:	f000 f866 	bl	80003f8 <defeat>
					exception++;
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <EXTI15_10_IRQHandler+0x7c>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	3301      	adds	r3, #1
 8000332:	4a09      	ldr	r2, [pc, #36]	@ (8000358 <EXTI15_10_IRQHandler+0x7c>)
 8000334:	6013      	str	r3, [r2, #0]
					pressed1 = 0;
 8000336:	4b09      	ldr	r3, [pc, #36]	@ (800035c <EXTI15_10_IRQHandler+0x80>)
 8000338:	2200      	movs	r2, #0
 800033a:	601a      	str	r2, [r3, #0]
					pressed2 = 0;
 800033c:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <EXTI15_10_IRQHandler+0x84>)
 800033e:	2200      	movs	r2, #0
 8000340:	601a      	str	r2, [r3, #0]
					pressed3 = 0;
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <EXTI15_10_IRQHandler+0x88>)
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
					pressed4 = 0;
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <EXTI15_10_IRQHandler+0x8c>)
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
					enter_nums = 0;
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <EXTI15_10_IRQHandler+0x98>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000040 	.word	0x20000040
 800035c:	20000030 	.word	0x20000030
 8000360:	20000034 	.word	0x20000034
 8000364:	20000038 	.word	0x20000038
 8000368:	2000003c 	.word	0x2000003c
 800036c:	20000000 	.word	0x20000000
 8000370:	20000024 	.word	0x20000024
 8000374:	2000002c 	.word	0x2000002c

08000378 <dummy_delay>:

void dummy_delay(uint32_t duration) {
 8000378:	b480      	push	{r7}
 800037a:	b085      	sub	sp, #20
 800037c:	af00      	add	r7, sp, #0
 800037e:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < duration; i+=1);
 8000380:	2300      	movs	r3, #0
 8000382:	60fb      	str	r3, [r7, #12]
 8000384:	e002      	b.n	800038c <dummy_delay+0x14>
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	3301      	adds	r3, #1
 800038a:	60fb      	str	r3, [r7, #12]
 800038c:	68fa      	ldr	r2, [r7, #12]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	429a      	cmp	r2, r3
 8000392:	d3f8      	bcc.n	8000386 <dummy_delay+0xe>
}
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <victory>:

void victory() {
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	GPIOE->ODR |= GPIO_ODR_OD0 | GPIO_ODR_OD3;
 80003a8:	4b11      	ldr	r3, [pc, #68]	@ (80003f0 <victory+0x4c>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a10      	ldr	r2, [pc, #64]	@ (80003f0 <victory+0x4c>)
 80003ae:	f043 0309 	orr.w	r3, r3, #9
 80003b2:	6153      	str	r3, [r2, #20]
	dummy_delay(200000);
 80003b4:	480f      	ldr	r0, [pc, #60]	@ (80003f4 <victory+0x50>)
 80003b6:	f7ff ffdf 	bl	8000378 <dummy_delay>
	GPIOE->ODR &= ~(GPIO_ODR_OD0 | GPIO_ODR_OD3);
 80003ba:	4b0d      	ldr	r3, [pc, #52]	@ (80003f0 <victory+0x4c>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	4a0c      	ldr	r2, [pc, #48]	@ (80003f0 <victory+0x4c>)
 80003c0:	f023 0309 	bic.w	r3, r3, #9
 80003c4:	6153      	str	r3, [r2, #20]
	dummy_delay(200000);
 80003c6:	480b      	ldr	r0, [pc, #44]	@ (80003f4 <victory+0x50>)
 80003c8:	f7ff ffd6 	bl	8000378 <dummy_delay>
	GPIOE->ODR |= GPIO_ODR_OD1 | GPIO_ODR_OD2;
 80003cc:	4b08      	ldr	r3, [pc, #32]	@ (80003f0 <victory+0x4c>)
 80003ce:	695b      	ldr	r3, [r3, #20]
 80003d0:	4a07      	ldr	r2, [pc, #28]	@ (80003f0 <victory+0x4c>)
 80003d2:	f043 0306 	orr.w	r3, r3, #6
 80003d6:	6153      	str	r3, [r2, #20]
	dummy_delay(200000);
 80003d8:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <victory+0x50>)
 80003da:	f7ff ffcd 	bl	8000378 <dummy_delay>
	GPIOE->ODR &= ~(GPIO_ODR_OD1 | GPIO_ODR_OD2);
 80003de:	4b04      	ldr	r3, [pc, #16]	@ (80003f0 <victory+0x4c>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	4a03      	ldr	r2, [pc, #12]	@ (80003f0 <victory+0x4c>)
 80003e4:	f023 0306 	bic.w	r3, r3, #6
 80003e8:	6153      	str	r3, [r2, #20]
}
 80003ea:	bf00      	nop
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	48001000 	.word	0x48001000
 80003f4:	00030d40 	.word	0x00030d40

080003f8 <defeat>:
void defeat() {
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
	for (int i = 0; i <= 4; i++) {
 80003fe:	2300      	movs	r3, #0
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	e06b      	b.n	80004dc <defeat+0xe4>
		GPIOE->ODR |= GPIO_ODR_OD0;
 8000404:	4b39      	ldr	r3, [pc, #228]	@ (80004ec <defeat+0xf4>)
 8000406:	695b      	ldr	r3, [r3, #20]
 8000408:	4a38      	ldr	r2, [pc, #224]	@ (80004ec <defeat+0xf4>)
 800040a:	f043 0301 	orr.w	r3, r3, #1
 800040e:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 8000410:	4837      	ldr	r0, [pc, #220]	@ (80004f0 <defeat+0xf8>)
 8000412:	f7ff ffb1 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD0;
 8000416:	4b35      	ldr	r3, [pc, #212]	@ (80004ec <defeat+0xf4>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a34      	ldr	r2, [pc, #208]	@ (80004ec <defeat+0xf4>)
 800041c:	f023 0301 	bic.w	r3, r3, #1
 8000420:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= GPIO_ODR_OD1;
 8000422:	4b32      	ldr	r3, [pc, #200]	@ (80004ec <defeat+0xf4>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	4a31      	ldr	r2, [pc, #196]	@ (80004ec <defeat+0xf4>)
 8000428:	f043 0302 	orr.w	r3, r3, #2
 800042c:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 800042e:	4830      	ldr	r0, [pc, #192]	@ (80004f0 <defeat+0xf8>)
 8000430:	f7ff ffa2 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD1;
 8000434:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <defeat+0xf4>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a2c      	ldr	r2, [pc, #176]	@ (80004ec <defeat+0xf4>)
 800043a:	f023 0302 	bic.w	r3, r3, #2
 800043e:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= GPIO_ODR_OD2;
 8000440:	4b2a      	ldr	r3, [pc, #168]	@ (80004ec <defeat+0xf4>)
 8000442:	695b      	ldr	r3, [r3, #20]
 8000444:	4a29      	ldr	r2, [pc, #164]	@ (80004ec <defeat+0xf4>)
 8000446:	f043 0304 	orr.w	r3, r3, #4
 800044a:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 800044c:	4828      	ldr	r0, [pc, #160]	@ (80004f0 <defeat+0xf8>)
 800044e:	f7ff ff93 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD2;
 8000452:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <defeat+0xf4>)
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	4a25      	ldr	r2, [pc, #148]	@ (80004ec <defeat+0xf4>)
 8000458:	f023 0304 	bic.w	r3, r3, #4
 800045c:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= GPIO_ODR_OD3;
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <defeat+0xf4>)
 8000460:	695b      	ldr	r3, [r3, #20]
 8000462:	4a22      	ldr	r2, [pc, #136]	@ (80004ec <defeat+0xf4>)
 8000464:	f043 0308 	orr.w	r3, r3, #8
 8000468:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 800046a:	4821      	ldr	r0, [pc, #132]	@ (80004f0 <defeat+0xf8>)
 800046c:	f7ff ff84 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD3;
 8000470:	4b1e      	ldr	r3, [pc, #120]	@ (80004ec <defeat+0xf4>)
 8000472:	695b      	ldr	r3, [r3, #20]
 8000474:	4a1d      	ldr	r2, [pc, #116]	@ (80004ec <defeat+0xf4>)
 8000476:	f023 0308 	bic.w	r3, r3, #8
 800047a:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= GPIO_ODR_OD2;
 800047c:	4b1b      	ldr	r3, [pc, #108]	@ (80004ec <defeat+0xf4>)
 800047e:	695b      	ldr	r3, [r3, #20]
 8000480:	4a1a      	ldr	r2, [pc, #104]	@ (80004ec <defeat+0xf4>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 8000488:	4819      	ldr	r0, [pc, #100]	@ (80004f0 <defeat+0xf8>)
 800048a:	f7ff ff75 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD2;
 800048e:	4b17      	ldr	r3, [pc, #92]	@ (80004ec <defeat+0xf4>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a16      	ldr	r2, [pc, #88]	@ (80004ec <defeat+0xf4>)
 8000494:	f023 0304 	bic.w	r3, r3, #4
 8000498:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= GPIO_ODR_OD1;
 800049a:	4b14      	ldr	r3, [pc, #80]	@ (80004ec <defeat+0xf4>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	4a13      	ldr	r2, [pc, #76]	@ (80004ec <defeat+0xf4>)
 80004a0:	f043 0302 	orr.w	r3, r3, #2
 80004a4:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 80004a6:	4812      	ldr	r0, [pc, #72]	@ (80004f0 <defeat+0xf8>)
 80004a8:	f7ff ff66 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD1;
 80004ac:	4b0f      	ldr	r3, [pc, #60]	@ (80004ec <defeat+0xf4>)
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	4a0e      	ldr	r2, [pc, #56]	@ (80004ec <defeat+0xf4>)
 80004b2:	f023 0302 	bic.w	r3, r3, #2
 80004b6:	6153      	str	r3, [r2, #20]
		GPIOE->ODR |= GPIO_ODR_OD0;
 80004b8:	4b0c      	ldr	r3, [pc, #48]	@ (80004ec <defeat+0xf4>)
 80004ba:	695b      	ldr	r3, [r3, #20]
 80004bc:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <defeat+0xf4>)
 80004be:	f043 0301 	orr.w	r3, r3, #1
 80004c2:	6153      	str	r3, [r2, #20]
		dummy_delay(100000);
 80004c4:	480a      	ldr	r0, [pc, #40]	@ (80004f0 <defeat+0xf8>)
 80004c6:	f7ff ff57 	bl	8000378 <dummy_delay>
		GPIOE->ODR &= ~GPIO_ODR_OD0;
 80004ca:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <defeat+0xf4>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	4a07      	ldr	r2, [pc, #28]	@ (80004ec <defeat+0xf4>)
 80004d0:	f023 0301 	bic.w	r3, r3, #1
 80004d4:	6153      	str	r3, [r2, #20]
	for (int i = 0; i <= 4; i++) {
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	3301      	adds	r3, #1
 80004da:	607b      	str	r3, [r7, #4]
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2b04      	cmp	r3, #4
 80004e0:	dd90      	ble.n	8000404 <defeat+0xc>
	}
}
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	48001000 	.word	0x48001000
 80004f0:	000186a0 	.word	0x000186a0

080004f4 <try>:

void try() {
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
	if ((GPIOB->IDR & GPIO_IDR_ID12) == 0 && pressed1 == 0) {
 80004f8:	4b42      	ldr	r3, [pc, #264]	@ (8000604 <try+0x110>)
 80004fa:	691b      	ldr	r3, [r3, #16]
 80004fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000500:	2b00      	cmp	r3, #0
 8000502:	d119      	bne.n	8000538 <try+0x44>
 8000504:	4b40      	ldr	r3, [pc, #256]	@ (8000608 <try+0x114>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d115      	bne.n	8000538 <try+0x44>
		GPIOE->BSRR = GPIO_BSRR_BS0;
 800050c:	4b3f      	ldr	r3, [pc, #252]	@ (800060c <try+0x118>)
 800050e:	2201      	movs	r2, #1
 8000510:	619a      	str	r2, [r3, #24]
		key[enter_nums] = 'a';
 8000512:	4b3f      	ldr	r3, [pc, #252]	@ (8000610 <try+0x11c>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a3f      	ldr	r2, [pc, #252]	@ (8000614 <try+0x120>)
 8000518:	2161      	movs	r1, #97	@ 0x61
 800051a:	54d1      	strb	r1, [r2, r3]
		key[enter_nums + 1] = '\0';
 800051c:	4b3c      	ldr	r3, [pc, #240]	@ (8000610 <try+0x11c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	4a3c      	ldr	r2, [pc, #240]	@ (8000614 <try+0x120>)
 8000524:	2100      	movs	r1, #0
 8000526:	54d1      	strb	r1, [r2, r3]
		enter_nums+=1;
 8000528:	4b39      	ldr	r3, [pc, #228]	@ (8000610 <try+0x11c>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	3301      	adds	r3, #1
 800052e:	4a38      	ldr	r2, [pc, #224]	@ (8000610 <try+0x11c>)
 8000530:	6013      	str	r3, [r2, #0]
		pressed1 = 1;
 8000532:	4b35      	ldr	r3, [pc, #212]	@ (8000608 <try+0x114>)
 8000534:	2201      	movs	r2, #1
 8000536:	601a      	str	r2, [r3, #0]
	}
	if ((GPIOB->IDR & GPIO_IDR_ID13) == 0 && pressed2 == 0) {
 8000538:	4b32      	ldr	r3, [pc, #200]	@ (8000604 <try+0x110>)
 800053a:	691b      	ldr	r3, [r3, #16]
 800053c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000540:	2b00      	cmp	r3, #0
 8000542:	d119      	bne.n	8000578 <try+0x84>
 8000544:	4b34      	ldr	r3, [pc, #208]	@ (8000618 <try+0x124>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d115      	bne.n	8000578 <try+0x84>
		GPIOE->BSRR = GPIO_BSRR_BS1;
 800054c:	4b2f      	ldr	r3, [pc, #188]	@ (800060c <try+0x118>)
 800054e:	2202      	movs	r2, #2
 8000550:	619a      	str	r2, [r3, #24]
		key[enter_nums] = 'b';
 8000552:	4b2f      	ldr	r3, [pc, #188]	@ (8000610 <try+0x11c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	4a2f      	ldr	r2, [pc, #188]	@ (8000614 <try+0x120>)
 8000558:	2162      	movs	r1, #98	@ 0x62
 800055a:	54d1      	strb	r1, [r2, r3]
		key[enter_nums + 1] = '\0';
 800055c:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <try+0x11c>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	4a2c      	ldr	r2, [pc, #176]	@ (8000614 <try+0x120>)
 8000564:	2100      	movs	r1, #0
 8000566:	54d1      	strb	r1, [r2, r3]
		enter_nums+=1;
 8000568:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <try+0x11c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a28      	ldr	r2, [pc, #160]	@ (8000610 <try+0x11c>)
 8000570:	6013      	str	r3, [r2, #0]
		pressed2 = 1;
 8000572:	4b29      	ldr	r3, [pc, #164]	@ (8000618 <try+0x124>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
	}
	if ((GPIOB->IDR & GPIO_IDR_ID14) == 0 && pressed3 == 0) {
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <try+0x110>)
 800057a:	691b      	ldr	r3, [r3, #16]
 800057c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000580:	2b00      	cmp	r3, #0
 8000582:	d119      	bne.n	80005b8 <try+0xc4>
 8000584:	4b25      	ldr	r3, [pc, #148]	@ (800061c <try+0x128>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d115      	bne.n	80005b8 <try+0xc4>
		GPIOE->BSRR = GPIO_BSRR_BS2;
 800058c:	4b1f      	ldr	r3, [pc, #124]	@ (800060c <try+0x118>)
 800058e:	2204      	movs	r2, #4
 8000590:	619a      	str	r2, [r3, #24]
		key[enter_nums] = 'c';
 8000592:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <try+0x11c>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <try+0x120>)
 8000598:	2163      	movs	r1, #99	@ 0x63
 800059a:	54d1      	strb	r1, [r2, r3]
		key[enter_nums + 1] = '\0';
 800059c:	4b1c      	ldr	r3, [pc, #112]	@ (8000610 <try+0x11c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	4a1c      	ldr	r2, [pc, #112]	@ (8000614 <try+0x120>)
 80005a4:	2100      	movs	r1, #0
 80005a6:	54d1      	strb	r1, [r2, r3]
		enter_nums+=1;
 80005a8:	4b19      	ldr	r3, [pc, #100]	@ (8000610 <try+0x11c>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	3301      	adds	r3, #1
 80005ae:	4a18      	ldr	r2, [pc, #96]	@ (8000610 <try+0x11c>)
 80005b0:	6013      	str	r3, [r2, #0]
		pressed3 = 1;
 80005b2:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <try+0x128>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	601a      	str	r2, [r3, #0]
	}
	if ((GPIOB->IDR & GPIO_IDR_ID15) == 0 && pressed4 == 0) {
 80005b8:	4b12      	ldr	r3, [pc, #72]	@ (8000604 <try+0x110>)
 80005ba:	691b      	ldr	r3, [r3, #16]
 80005bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d119      	bne.n	80005f8 <try+0x104>
 80005c4:	4b16      	ldr	r3, [pc, #88]	@ (8000620 <try+0x12c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d115      	bne.n	80005f8 <try+0x104>
		GPIOE->BSRR = GPIO_BSRR_BS3;
 80005cc:	4b0f      	ldr	r3, [pc, #60]	@ (800060c <try+0x118>)
 80005ce:	2208      	movs	r2, #8
 80005d0:	619a      	str	r2, [r3, #24]
		key[enter_nums] = 'd';
 80005d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000610 <try+0x11c>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000614 <try+0x120>)
 80005d8:	2164      	movs	r1, #100	@ 0x64
 80005da:	54d1      	strb	r1, [r2, r3]
		key[enter_nums + 1] = '\0';
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <try+0x11c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	3301      	adds	r3, #1
 80005e2:	4a0c      	ldr	r2, [pc, #48]	@ (8000614 <try+0x120>)
 80005e4:	2100      	movs	r1, #0
 80005e6:	54d1      	strb	r1, [r2, r3]
		enter_nums+=1;
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <try+0x11c>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <try+0x11c>)
 80005f0:	6013      	str	r3, [r2, #0]
		pressed4 = 1;
 80005f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000620 <try+0x12c>)
 80005f4:	2201      	movs	r2, #1
 80005f6:	601a      	str	r2, [r3, #0]
	}
}
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	48000400 	.word	0x48000400
 8000608:	20000030 	.word	0x20000030
 800060c:	48001000 	.word	0x48001000
 8000610:	2000002c 	.word	0x2000002c
 8000614:	20000024 	.word	0x20000024
 8000618:	20000034 	.word	0x20000034
 800061c:	20000038 	.word	0x20000038
 8000620:	2000003c 	.word	0x2000003c

08000624 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000624:	480d      	ldr	r0, [pc, #52]	@ (800065c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000626:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000628:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800062c:	480c      	ldr	r0, [pc, #48]	@ (8000660 <LoopForever+0x6>)
  ldr r1, =_edata
 800062e:	490d      	ldr	r1, [pc, #52]	@ (8000664 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000630:	4a0d      	ldr	r2, [pc, #52]	@ (8000668 <LoopForever+0xe>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000634:	e002      	b.n	800063c <LoopCopyDataInit>

08000636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800063a:	3304      	adds	r3, #4

0800063c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800063c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000640:	d3f9      	bcc.n	8000636 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000642:	4a0a      	ldr	r2, [pc, #40]	@ (800066c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000644:	4c0a      	ldr	r4, [pc, #40]	@ (8000670 <LoopForever+0x16>)
  movs r3, #0
 8000646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000648:	e001      	b.n	800064e <LoopFillZerobss>

0800064a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800064a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800064c:	3204      	adds	r2, #4

0800064e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000650:	d3fb      	bcc.n	800064a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000652:	f000 f823 	bl	800069c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000656:	f7ff fdfd 	bl	8000254 <main>

0800065a <LoopForever>:

LoopForever:
  b LoopForever
 800065a:	e7fe      	b.n	800065a <LoopForever>
  ldr   r0, =_estack
 800065c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000660:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000664:	20000008 	.word	0x20000008
  ldr r2, =_sidata
 8000668:	08000704 	.word	0x08000704
  ldr r2, =_sbss
 800066c:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 8000670:	20000044 	.word	0x20000044

08000674 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000674:	e7fe      	b.n	8000674 <ADC1_2_IRQHandler>

08000676 <strncmp>:
 8000676:	b510      	push	{r4, lr}
 8000678:	b16a      	cbz	r2, 8000696 <strncmp+0x20>
 800067a:	3901      	subs	r1, #1
 800067c:	1884      	adds	r4, r0, r2
 800067e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000682:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8000686:	429a      	cmp	r2, r3
 8000688:	d103      	bne.n	8000692 <strncmp+0x1c>
 800068a:	42a0      	cmp	r0, r4
 800068c:	d001      	beq.n	8000692 <strncmp+0x1c>
 800068e:	2a00      	cmp	r2, #0
 8000690:	d1f5      	bne.n	800067e <strncmp+0x8>
 8000692:	1ad0      	subs	r0, r2, r3
 8000694:	bd10      	pop	{r4, pc}
 8000696:	4610      	mov	r0, r2
 8000698:	e7fc      	b.n	8000694 <strncmp+0x1e>
	...

0800069c <__libc_init_array>:
 800069c:	b570      	push	{r4, r5, r6, lr}
 800069e:	4d0d      	ldr	r5, [pc, #52]	@ (80006d4 <__libc_init_array+0x38>)
 80006a0:	4c0d      	ldr	r4, [pc, #52]	@ (80006d8 <__libc_init_array+0x3c>)
 80006a2:	1b64      	subs	r4, r4, r5
 80006a4:	10a4      	asrs	r4, r4, #2
 80006a6:	2600      	movs	r6, #0
 80006a8:	42a6      	cmp	r6, r4
 80006aa:	d109      	bne.n	80006c0 <__libc_init_array+0x24>
 80006ac:	4d0b      	ldr	r5, [pc, #44]	@ (80006dc <__libc_init_array+0x40>)
 80006ae:	4c0c      	ldr	r4, [pc, #48]	@ (80006e0 <__libc_init_array+0x44>)
 80006b0:	f000 f818 	bl	80006e4 <_init>
 80006b4:	1b64      	subs	r4, r4, r5
 80006b6:	10a4      	asrs	r4, r4, #2
 80006b8:	2600      	movs	r6, #0
 80006ba:	42a6      	cmp	r6, r4
 80006bc:	d105      	bne.n	80006ca <__libc_init_array+0x2e>
 80006be:	bd70      	pop	{r4, r5, r6, pc}
 80006c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80006c4:	4798      	blx	r3
 80006c6:	3601      	adds	r6, #1
 80006c8:	e7ee      	b.n	80006a8 <__libc_init_array+0xc>
 80006ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80006ce:	4798      	blx	r3
 80006d0:	3601      	adds	r6, #1
 80006d2:	e7f2      	b.n	80006ba <__libc_init_array+0x1e>
 80006d4:	080006fc 	.word	0x080006fc
 80006d8:	080006fc 	.word	0x080006fc
 80006dc:	080006fc 	.word	0x080006fc
 80006e0:	08000700 	.word	0x08000700

080006e4 <_init>:
 80006e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006e6:	bf00      	nop
 80006e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ea:	bc08      	pop	{r3}
 80006ec:	469e      	mov	lr, r3
 80006ee:	4770      	bx	lr

080006f0 <_fini>:
 80006f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006f2:	bf00      	nop
 80006f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006f6:	bc08      	pop	{r3}
 80006f8:	469e      	mov	lr, r3
 80006fa:	4770      	bx	lr
